//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SAN.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
public partial class SANParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MOVE=1, MOVE_A1=2, MOVE_A2=3, MOVE_A3=4, MOVE_CAPTURE=5, MOVE_CAPTURE_A1=6, 
		MOVE_CAPTURE_A2=7, MOVE_CAPTURE_A3=8, PAWN_PUSH=9, PAWN_PUSH_PROMOTE=10, 
		PAWN_CAPTURE=11, PAWN_CAPTURE_A1=12, PAWN_CAPTURE_PROMOTE=13, PAWN_CAPTURE_PROMOTE_A1=14, 
		CASTLE_KING=15, CASTLE_QUEEN=16, TERMINATE=17, PIECE_SYMBOL=18, FILE=19, 
		RANK=20, SQUARE=21, CAPTURE=22, PROMOTED_TO=23, CHECK=24, SUFFIX=25, SYMBOL=26, 
		SPACES=27;
	public const int
		RULE_san_game = 0, RULE_san_termination = 1, RULE_san_sequence = 2, RULE_san_move = 3, 
		RULE_piece_moves = 4, RULE_piece_moves_A1 = 5, RULE_piece_moves_A2 = 6, 
		RULE_piece_moves_A3 = 7, RULE_piece_move_capture = 8, RULE_piece_move_capture_A1 = 9, 
		RULE_piece_move_capture_A2 = 10, RULE_piece_move_capture_A3 = 11, RULE_pawn_push = 12, 
		RULE_pawn_push_promote = 13, RULE_pawn_capture = 14, RULE_pawn_capture_A1 = 15, 
		RULE_pawn_capture_promote = 16, RULE_pawn_capture_promote_A1 = 17, RULE_castle_king = 18, 
		RULE_castle_queen = 19;
	public static readonly string[] ruleNames = {
		"san_game", "san_termination", "san_sequence", "san_move", "piece_moves", 
		"piece_moves_A1", "piece_moves_A2", "piece_moves_A3", "piece_move_capture", 
		"piece_move_capture_A1", "piece_move_capture_A2", "piece_move_capture_A3", 
		"pawn_push", "pawn_push_promote", "pawn_capture", "pawn_capture_A1", "pawn_capture_promote", 
		"pawn_capture_promote_A1", "castle_king", "castle_queen"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "'O-O'", "'O-O-O'", "'____'", null, null, null, null, 
		"'x'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MOVE", "MOVE_A1", "MOVE_A2", "MOVE_A3", "MOVE_CAPTURE", "MOVE_CAPTURE_A1", 
		"MOVE_CAPTURE_A2", "MOVE_CAPTURE_A3", "PAWN_PUSH", "PAWN_PUSH_PROMOTE", 
		"PAWN_CAPTURE", "PAWN_CAPTURE_A1", "PAWN_CAPTURE_PROMOTE", "PAWN_CAPTURE_PROMOTE_A1", 
		"CASTLE_KING", "CASTLE_QUEEN", "TERMINATE", "PIECE_SYMBOL", "FILE", "RANK", 
		"SQUARE", "CAPTURE", "PROMOTED_TO", "CHECK", "SUFFIX", "SYMBOL", "SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SAN.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SANParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SANParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SANParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class San_gameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public San_sequenceContext san_sequence() {
			return GetRuleContext<San_sequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public San_terminationContext san_termination() {
			return GetRuleContext<San_terminationContext>(0);
		}
		public San_gameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_san_game; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSan_game(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public San_gameContext san_game() {
		San_gameContext _localctx = new San_gameContext(Context, State);
		EnterRule(_localctx, 0, RULE_san_game);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			san_sequence();
			State = 41;
			san_termination();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class San_terminationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATE() { return GetToken(SANParser.TERMINATE, 0); }
		public San_terminationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_san_termination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSan_termination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public San_terminationContext san_termination() {
		San_terminationContext _localctx = new San_terminationContext(Context, State);
		EnterRule(_localctx, 2, RULE_san_termination);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(TERMINATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class San_sequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public San_moveContext[] san_move() {
			return GetRuleContexts<San_moveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public San_moveContext san_move(int i) {
			return GetRuleContext<San_moveContext>(i);
		}
		public San_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_san_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSan_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public San_sequenceContext san_sequence() {
		San_sequenceContext _localctx = new San_sequenceContext(Context, State);
		EnterRule(_localctx, 4, RULE_san_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 67239934L) != 0) {
				{
				{
				State = 45;
				san_move();
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class San_moveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Piece_movesContext piece_moves() {
			return GetRuleContext<Piece_movesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Piece_moves_A1Context piece_moves_A1() {
			return GetRuleContext<Piece_moves_A1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Piece_moves_A2Context piece_moves_A2() {
			return GetRuleContext<Piece_moves_A2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Piece_moves_A3Context piece_moves_A3() {
			return GetRuleContext<Piece_moves_A3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Piece_move_captureContext piece_move_capture() {
			return GetRuleContext<Piece_move_captureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Piece_move_capture_A1Context piece_move_capture_A1() {
			return GetRuleContext<Piece_move_capture_A1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Piece_move_capture_A2Context piece_move_capture_A2() {
			return GetRuleContext<Piece_move_capture_A2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Piece_move_capture_A3Context piece_move_capture_A3() {
			return GetRuleContext<Piece_move_capture_A3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pawn_pushContext pawn_push() {
			return GetRuleContext<Pawn_pushContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pawn_push_promoteContext pawn_push_promote() {
			return GetRuleContext<Pawn_push_promoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pawn_captureContext pawn_capture() {
			return GetRuleContext<Pawn_captureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pawn_capture_A1Context pawn_capture_A1() {
			return GetRuleContext<Pawn_capture_A1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pawn_capture_promoteContext pawn_capture_promote() {
			return GetRuleContext<Pawn_capture_promoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pawn_capture_promote_A1Context pawn_capture_promote_A1() {
			return GetRuleContext<Pawn_capture_promote_A1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Castle_kingContext castle_king() {
			return GetRuleContext<Castle_kingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Castle_queenContext castle_queen() {
			return GetRuleContext<Castle_queenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(SANParser.SYMBOL, 0); }
		public San_moveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_san_move; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSan_move(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public San_moveContext san_move() {
		San_moveContext _localctx = new San_moveContext(Context, State);
		EnterRule(_localctx, 6, RULE_san_move);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MOVE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				piece_moves();
				}
				break;
			case MOVE_A1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				piece_moves_A1();
				}
				break;
			case MOVE_A2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 53;
				piece_moves_A2();
				}
				break;
			case MOVE_A3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 54;
				piece_moves_A3();
				}
				break;
			case MOVE_CAPTURE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 55;
				piece_move_capture();
				}
				break;
			case MOVE_CAPTURE_A1:
				EnterOuterAlt(_localctx, 6);
				{
				State = 56;
				piece_move_capture_A1();
				}
				break;
			case MOVE_CAPTURE_A2:
				EnterOuterAlt(_localctx, 7);
				{
				State = 57;
				piece_move_capture_A2();
				}
				break;
			case MOVE_CAPTURE_A3:
				EnterOuterAlt(_localctx, 8);
				{
				State = 58;
				piece_move_capture_A3();
				}
				break;
			case PAWN_PUSH:
				EnterOuterAlt(_localctx, 9);
				{
				State = 59;
				pawn_push();
				}
				break;
			case PAWN_PUSH_PROMOTE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 60;
				pawn_push_promote();
				}
				break;
			case PAWN_CAPTURE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 61;
				pawn_capture();
				}
				break;
			case PAWN_CAPTURE_A1:
				EnterOuterAlt(_localctx, 12);
				{
				State = 62;
				pawn_capture_A1();
				}
				break;
			case PAWN_CAPTURE_PROMOTE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 63;
				pawn_capture_promote();
				}
				break;
			case PAWN_CAPTURE_PROMOTE_A1:
				EnterOuterAlt(_localctx, 14);
				{
				State = 64;
				pawn_capture_promote_A1();
				}
				break;
			case CASTLE_KING:
				EnterOuterAlt(_localctx, 15);
				{
				State = 65;
				castle_king();
				}
				break;
			case CASTLE_QUEEN:
				EnterOuterAlt(_localctx, 16);
				{
				State = 66;
				castle_queen();
				}
				break;
			case SYMBOL:
				EnterOuterAlt(_localctx, 17);
				{
				State = 67;
				Match(SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Piece_movesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE() { return GetToken(SANParser.MOVE, 0); }
		public Piece_movesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_piece_moves; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiece_moves(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Piece_movesContext piece_moves() {
		Piece_movesContext _localctx = new Piece_movesContext(Context, State);
		EnterRule(_localctx, 8, RULE_piece_moves);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(MOVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Piece_moves_A1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_A1() { return GetToken(SANParser.MOVE_A1, 0); }
		public Piece_moves_A1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_piece_moves_A1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiece_moves_A1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Piece_moves_A1Context piece_moves_A1() {
		Piece_moves_A1Context _localctx = new Piece_moves_A1Context(Context, State);
		EnterRule(_localctx, 10, RULE_piece_moves_A1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(MOVE_A1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Piece_moves_A2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_A2() { return GetToken(SANParser.MOVE_A2, 0); }
		public Piece_moves_A2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_piece_moves_A2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiece_moves_A2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Piece_moves_A2Context piece_moves_A2() {
		Piece_moves_A2Context _localctx = new Piece_moves_A2Context(Context, State);
		EnterRule(_localctx, 12, RULE_piece_moves_A2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(MOVE_A2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Piece_moves_A3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_A3() { return GetToken(SANParser.MOVE_A3, 0); }
		public Piece_moves_A3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_piece_moves_A3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiece_moves_A3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Piece_moves_A3Context piece_moves_A3() {
		Piece_moves_A3Context _localctx = new Piece_moves_A3Context(Context, State);
		EnterRule(_localctx, 14, RULE_piece_moves_A3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(MOVE_A3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Piece_move_captureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_CAPTURE() { return GetToken(SANParser.MOVE_CAPTURE, 0); }
		public Piece_move_captureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_piece_move_capture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiece_move_capture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Piece_move_captureContext piece_move_capture() {
		Piece_move_captureContext _localctx = new Piece_move_captureContext(Context, State);
		EnterRule(_localctx, 16, RULE_piece_move_capture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(MOVE_CAPTURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Piece_move_capture_A1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_CAPTURE_A1() { return GetToken(SANParser.MOVE_CAPTURE_A1, 0); }
		public Piece_move_capture_A1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_piece_move_capture_A1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiece_move_capture_A1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Piece_move_capture_A1Context piece_move_capture_A1() {
		Piece_move_capture_A1Context _localctx = new Piece_move_capture_A1Context(Context, State);
		EnterRule(_localctx, 18, RULE_piece_move_capture_A1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(MOVE_CAPTURE_A1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Piece_move_capture_A2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_CAPTURE_A2() { return GetToken(SANParser.MOVE_CAPTURE_A2, 0); }
		public Piece_move_capture_A2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_piece_move_capture_A2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiece_move_capture_A2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Piece_move_capture_A2Context piece_move_capture_A2() {
		Piece_move_capture_A2Context _localctx = new Piece_move_capture_A2Context(Context, State);
		EnterRule(_localctx, 20, RULE_piece_move_capture_A2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(MOVE_CAPTURE_A2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Piece_move_capture_A3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOVE_CAPTURE_A3() { return GetToken(SANParser.MOVE_CAPTURE_A3, 0); }
		public Piece_move_capture_A3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_piece_move_capture_A3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiece_move_capture_A3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Piece_move_capture_A3Context piece_move_capture_A3() {
		Piece_move_capture_A3Context _localctx = new Piece_move_capture_A3Context(Context, State);
		EnterRule(_localctx, 22, RULE_piece_move_capture_A3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(MOVE_CAPTURE_A3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pawn_pushContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAWN_PUSH() { return GetToken(SANParser.PAWN_PUSH, 0); }
		public Pawn_pushContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pawn_push; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPawn_push(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pawn_pushContext pawn_push() {
		Pawn_pushContext _localctx = new Pawn_pushContext(Context, State);
		EnterRule(_localctx, 24, RULE_pawn_push);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(PAWN_PUSH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pawn_push_promoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAWN_PUSH_PROMOTE() { return GetToken(SANParser.PAWN_PUSH_PROMOTE, 0); }
		public Pawn_push_promoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pawn_push_promote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPawn_push_promote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pawn_push_promoteContext pawn_push_promote() {
		Pawn_push_promoteContext _localctx = new Pawn_push_promoteContext(Context, State);
		EnterRule(_localctx, 26, RULE_pawn_push_promote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			Match(PAWN_PUSH_PROMOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pawn_captureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAWN_CAPTURE() { return GetToken(SANParser.PAWN_CAPTURE, 0); }
		public Pawn_captureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pawn_capture; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPawn_capture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pawn_captureContext pawn_capture() {
		Pawn_captureContext _localctx = new Pawn_captureContext(Context, State);
		EnterRule(_localctx, 28, RULE_pawn_capture);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(PAWN_CAPTURE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pawn_capture_A1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAWN_CAPTURE_A1() { return GetToken(SANParser.PAWN_CAPTURE_A1, 0); }
		public Pawn_capture_A1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pawn_capture_A1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPawn_capture_A1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pawn_capture_A1Context pawn_capture_A1() {
		Pawn_capture_A1Context _localctx = new Pawn_capture_A1Context(Context, State);
		EnterRule(_localctx, 30, RULE_pawn_capture_A1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(PAWN_CAPTURE_A1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pawn_capture_promoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAWN_CAPTURE_PROMOTE() { return GetToken(SANParser.PAWN_CAPTURE_PROMOTE, 0); }
		public Pawn_capture_promoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pawn_capture_promote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPawn_capture_promote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pawn_capture_promoteContext pawn_capture_promote() {
		Pawn_capture_promoteContext _localctx = new Pawn_capture_promoteContext(Context, State);
		EnterRule(_localctx, 32, RULE_pawn_capture_promote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(PAWN_CAPTURE_PROMOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pawn_capture_promote_A1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAWN_CAPTURE_PROMOTE_A1() { return GetToken(SANParser.PAWN_CAPTURE_PROMOTE_A1, 0); }
		public Pawn_capture_promote_A1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pawn_capture_promote_A1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPawn_capture_promote_A1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pawn_capture_promote_A1Context pawn_capture_promote_A1() {
		Pawn_capture_promote_A1Context _localctx = new Pawn_capture_promote_A1Context(Context, State);
		EnterRule(_localctx, 34, RULE_pawn_capture_promote_A1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(PAWN_CAPTURE_PROMOTE_A1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Castle_kingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASTLE_KING() { return GetToken(SANParser.CASTLE_KING, 0); }
		public Castle_kingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castle_king; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastle_king(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Castle_kingContext castle_king() {
		Castle_kingContext _localctx = new Castle_kingContext(Context, State);
		EnterRule(_localctx, 36, RULE_castle_king);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(CASTLE_KING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Castle_queenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASTLE_QUEEN() { return GetToken(SANParser.CASTLE_QUEEN, 0); }
		public Castle_queenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castle_queen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISANVisitor<TResult> typedVisitor = visitor as ISANVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastle_queen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Castle_queenContext castle_queen() {
		Castle_queenContext _localctx = new Castle_queenContext(Context, State);
		EnterRule(_localctx, 38, RULE_castle_queen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(CASTLE_QUEEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,27,103,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,1,1,1,
		1,2,5,2,47,8,2,10,2,12,2,50,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,69,8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
		7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
		15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,0,0,20,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,0,0,99,0,40,1,0,0,0,2,43,
		1,0,0,0,4,48,1,0,0,0,6,68,1,0,0,0,8,70,1,0,0,0,10,72,1,0,0,0,12,74,1,0,
		0,0,14,76,1,0,0,0,16,78,1,0,0,0,18,80,1,0,0,0,20,82,1,0,0,0,22,84,1,0,
		0,0,24,86,1,0,0,0,26,88,1,0,0,0,28,90,1,0,0,0,30,92,1,0,0,0,32,94,1,0,
		0,0,34,96,1,0,0,0,36,98,1,0,0,0,38,100,1,0,0,0,40,41,3,4,2,0,41,42,3,2,
		1,0,42,1,1,0,0,0,43,44,5,17,0,0,44,3,1,0,0,0,45,47,3,6,3,0,46,45,1,0,0,
		0,47,50,1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,5,1,0,0,0,50,48,1,0,0,0,
		51,69,3,8,4,0,52,69,3,10,5,0,53,69,3,12,6,0,54,69,3,14,7,0,55,69,3,16,
		8,0,56,69,3,18,9,0,57,69,3,20,10,0,58,69,3,22,11,0,59,69,3,24,12,0,60,
		69,3,26,13,0,61,69,3,28,14,0,62,69,3,30,15,0,63,69,3,32,16,0,64,69,3,34,
		17,0,65,69,3,36,18,0,66,69,3,38,19,0,67,69,5,26,0,0,68,51,1,0,0,0,68,52,
		1,0,0,0,68,53,1,0,0,0,68,54,1,0,0,0,68,55,1,0,0,0,68,56,1,0,0,0,68,57,
		1,0,0,0,68,58,1,0,0,0,68,59,1,0,0,0,68,60,1,0,0,0,68,61,1,0,0,0,68,62,
		1,0,0,0,68,63,1,0,0,0,68,64,1,0,0,0,68,65,1,0,0,0,68,66,1,0,0,0,68,67,
		1,0,0,0,69,7,1,0,0,0,70,71,5,1,0,0,71,9,1,0,0,0,72,73,5,2,0,0,73,11,1,
		0,0,0,74,75,5,3,0,0,75,13,1,0,0,0,76,77,5,4,0,0,77,15,1,0,0,0,78,79,5,
		5,0,0,79,17,1,0,0,0,80,81,5,6,0,0,81,19,1,0,0,0,82,83,5,7,0,0,83,21,1,
		0,0,0,84,85,5,8,0,0,85,23,1,0,0,0,86,87,5,9,0,0,87,25,1,0,0,0,88,89,5,
		10,0,0,89,27,1,0,0,0,90,91,5,11,0,0,91,29,1,0,0,0,92,93,5,12,0,0,93,31,
		1,0,0,0,94,95,5,13,0,0,95,33,1,0,0,0,96,97,5,14,0,0,97,35,1,0,0,0,98,99,
		5,15,0,0,99,37,1,0,0,0,100,101,5,16,0,0,101,39,1,0,0,0,2,48,68
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
